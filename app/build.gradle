apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.vinaysshenoy.android3d"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

configurations { natives }

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcore3d')
    compile "com.android.support:appcompat-v7:${rootProject.supportLibVersion}"

    compile "com.badlogicgames.gdx:gdx-backend-android:${rootProject.gdxVersion}"
    natives "com.badlogicgames.gdx:gdx-platform:${rootProject.gdxVersion}:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:${rootProject.gdxVersion}:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:${rootProject.gdxVersion}:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:${rootProject.gdxVersion}:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:${rootProject.gdxVersion}:natives-x86_64"

    /*
    * Optional dependencies.
    *
    * Use if you're planning to have text in the 3D animations
    * */
    compile "com.badlogicgames.gdx:gdx-freetype:${rootProject.gdxVersion}"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:${rootProject.gdxVersion}:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:${rootProject.gdxVersion}:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:${rootProject.gdxVersion}:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:${rootProject.gdxVersion}:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:${rootProject.gdxVersion}:natives-x86_64"

    testCompile 'junit:junit:4.12'
    androidTestCompile("com.android.support.test.espresso:espresso-core:${rootProject.espressoVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

//Run this whenever you change gdxVersion
tasks.create('copyNativeLibs', {
    doFirst {
        file("src/main/jniLibs/armeabi/").mkdirs();
        file("src/main/jniLibs/armeabi-v7a/").mkdirs();
        file("src/main/jniLibs/arm64-v8a/").mkdirs();
        file("src/main/jniLibs/x86_64/").mkdirs();
        file("src/main/jniLibs/x86/").mkdirs();

        configurations.natives.files.each { jar ->
            def outputDir = null
            if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("src/main/jniLibs/arm64-v8a")
            if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
            if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("src/main/jniLibs/armeabi")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("src/main/jniLibs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
})
